{"ast":null,"code":"import { fetchCustomerListSuccess, fetchCustomerListAddSuccess, updateCustomerList } from './customerReducer';\nimport Customer from '../services/customer';\nimport { v4 as uuidv4 } from 'uuid';\nexport const initialState = {\n  isLoading: null,\n  error: null,\n  customerList: []\n};\nexport const customerData = () => ({\n  type: 'CUSTOMER_LIST'\n});\nexport const saveCustomer1 = data => ({\n  type: 'SAVE_CUSTOMER',\n  payload: data\n});\nexport const updateCustomer = data => ({\n  type: 'UPDATE_CUSTOMER',\n  payload: data\n});\nexport const deleteCustomer = data => ({\n  type: 'DELETE_CUSTOMER',\n  payload: data\n});\nexport const reducerOne = (state, action) => {\n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST':\n        {\n          const data = Customer.getCustomerList();\n          return fetchCustomerListSuccess({\n            customerData: data\n          });\n          break;\n        }\n\n      case 'SAVE_CUSTOMER':\n        {\n          if (!(action.payload && action.payload.customerGroup && action.payload.customerGroup.trim())) {\n            alert('Customer group should not be empty!');\n            return { ...state\n            };\n          }\n\n          if (!(action.payload && action.payload.customerName && action.payload.customerName.trim())) {\n            alert('Customer name should not be empty!');\n            return { ...state\n            };\n          }\n\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const data = {\n            model: \"accounts_receivable.cusgrp\",\n            pk: uuidv4(),\n            fields: {\n              customer_group: action.payload.customerGroup,\n              csgrp_name: action.payload.customerName\n            }\n          };\n          clonedCustomerList.push(data);\n          return fetchCustomerListAddSuccess({\n            customerList: clonedCustomerList\n          });\n          break;\n        }\n\n      case 'UPDATE_CUSTOMER':\n        {\n          console.log('update customer', action);\n          const {\n            id,\n            newCustomerName\n          } = action.payload;\n\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return { ...state\n            };\n          }\n\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex(customer => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n          return updateCustomerList({\n            customerList: clonedCustomerList\n          });\n          break;\n        }\n\n      case 'DELETE_CUSTOMER':\n        {\n          const {\n            id\n          } = action.payload;\n          const {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter(customer => customer.pk !== id);\n          return updateCustomerList({\n            customerList: updatedCustomerList\n          });\n          break;\n        }\n\n      default:\n        return { ...state\n        };\n        break;\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n};","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/un-stated/reducerOne.js"],"names":["fetchCustomerListSuccess","fetchCustomerListAddSuccess","updateCustomerList","Customer","v4","uuidv4","initialState","isLoading","error","customerList","customerData","type","saveCustomer1","data","payload","updateCustomer","deleteCustomer","reducerOne","state","action","getCustomerList","customerGroup","trim","alert","customerName","clonedCustomerList","JSON","parse","stringify","model","pk","fields","customer_group","csgrp_name","push","console","log","id","newCustomerName","index","findIndex","customer","updatedCustomerList","filter","e"],"mappings":"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","sourcesContent":["import {\n    fetchCustomerListSuccess,\n    fetchCustomerListAddSuccess,\n    updateCustomerList\n  } from './customerReducer';\nimport Customer from '../services/customer';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport const initialState = {\n    isLoading: null,\n    error: null,\n    customerList: [],\n  }\n\nexport const customerData = () => ({type: 'CUSTOMER_LIST'});\nexport const saveCustomer1 = (data) => ({type: 'SAVE_CUSTOMER', payload: data});\nexport const updateCustomer = (data) => ({type: 'UPDATE_CUSTOMER', payload:data});\nexport const deleteCustomer = (data) => ({type: 'DELETE_CUSTOMER', payload: data})\n\nexport const reducerOne = (state,action)=> {\n  \n    try {\n      switch (action.type) {\n        case 'CUSTOMER_LIST': {\n          const data = Customer.getCustomerList();\n         return  fetchCustomerListSuccess({customerData: data})\n          break;\n        }\n        case 'SAVE_CUSTOMER': {\n \n          if (!(action.payload && action.payload.customerGroup && action.payload.customerGroup.trim())) {\n            alert('Customer group should not be empty!');\n            return {...state};\n          }\n          \n          if (!(action.payload && action.payload.customerName && action.payload.customerName.trim())) {\n            alert('Customer name should not be empty!');\n            return {...state};\n          }\n            let {customerList} = state;\n            const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n            const data =  {\n              model: \"accounts_receivable.cusgrp\",\n              pk: uuidv4(),\n              fields: {\n                customer_group: action.payload.customerGroup,\n                csgrp_name: action.payload.customerName\n              }\n            }\n            clonedCustomerList.push(data)\n           \n             return fetchCustomerListAddSuccess({customerList: clonedCustomerList});\n          break;\n        }\n        case 'UPDATE_CUSTOMER': {\n            console.log('update customer',action)\n            const {id, newCustomerName} = action.payload;\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return {...state};\n          }\n          let {customerList} = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n         return updateCustomerList({ customerList: clonedCustomerList })\n          break;\n        }\n        case 'DELETE_CUSTOMER': {\n          const {id} = action.payload;\n          const {customerList} = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n         return updateCustomerList({ customerList: updatedCustomerList });\n          break;\n        }\n        default:\n          return {\n            ...state\n          }\n          break\n      }\n    } catch (e) {\n      console.error(`Error occuring while calling an action ${action.type}`, e);\n    }\n  }"]},"metadata":{},"sourceType":"module"}