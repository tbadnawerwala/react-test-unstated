{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from \"react\";\nimport { createContainer } from \"unstated-next\";\nconst initialCount = {\n  count: 0\n};\n\nconst reducerOne = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return {\n        count: state.count + 1\n      };\n\n    case 'decrement':\n      return {\n        count: state.count - 1\n      };\n\n    case 'reset':\n      return action.payload;\n\n    default:\n      throw new Error();\n  }\n};\n\nfunction useCounter() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialCount);\n  return {\n    state,\n    dispatch\n  };\n}\n\n_s(useCounter, \"lpkAvzaijKoaZVi3K36ZWcAB+QM=\");\n\nexport const Counter = createContainer(useCounter);","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/un-stated/index.js"],"names":["React","useState","useReducer","createContainer","initialCount","count","reducerOne","state","action","type","payload","Error","useCounter","dispatch","reducer","Counter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,UAAzB,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,eAAhC;AAGA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAE;AAAR,CAArB;;AACA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AACE,aAAO;AAACJ,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAtB,OAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAACA,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAtB,OAAP;;AACF,SAAK,OAAL;AACE,aAAOG,MAAM,CAACE,OAAd;;AACF;AACE,YAAM,IAAIC,KAAJ,EAAN;AARN;AAUH,CAXD;;AAaA,SAASC,UAAT,GAAqB;AAAA;;AACjB,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBX,UAAU,CAACY,OAAD,EAAUV,YAAV,CAApC;AACA,SAAO;AAACG,IAAAA,KAAD;AAAQM,IAAAA;AAAR,GAAP;AACH;;GAHQD,U;;AAMT,OAAO,MAAMG,OAAO,GAAIZ,eAAe,CAACS,UAAD,CAAhC","sourcesContent":["import React, { useState,useReducer } from \"react\"\nimport { createContainer } from \"unstated-next\"\n\n\nconst initialCount = {count: 0};\nconst reducerOne = (state, action) =>{\n    switch (action.type) {\n        case 'increment':\n          return {count: state.count + 1};\n        case 'decrement':\n          return {count: state.count - 1};\n        case 'reset':\n          return action.payload;\n        default:\n          throw new Error();\n      }\n}\n\nfunction useCounter(){\n    const [state, dispatch] = useReducer(reducer, initialCount);\n    return {state, dispatch}\n}\n\n\nexport const Counter  = createContainer(useCounter);\n\n\n"]},"metadata":{},"sourceType":"module"}