{"ast":null,"code":"import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport { fetchCustomerListStart, fetchCustomerListSuccess, fetchCustomerListAddSuccess, updateCustomerList } from '../reducers/customer-list';\nimport { resetAddCustomerState } from '../reducers/add-customer';\nimport { ADD_CUSTOMER, UPDATE_CUSTOMER, DELETE_CUSTOMER } from '../actions/constants';\nimport Customer from '../services/customer';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction* customerListWatcher() {\n  yield takeLatest([fetchCustomerListStart.type, ADD_CUSTOMER, UPDATE_CUSTOMER, DELETE_CUSTOMER], CustomerListWorker);\n}\n\nfunction* CustomerListWorker(action) {\n  try {\n    switch (action.type) {\n      case fetchCustomerListStart.type:\n        {\n          const data = Customer.getCustomerList();\n          yield put(fetchCustomerListSuccess({\n            customerData: data\n          }));\n          break;\n        }\n\n      case ADD_CUSTOMER:\n        {\n          const {\n            customer\n          } = yield select(state => state.addCustomer);\n\n          if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n            alert('Customer group should not be empty!');\n            return;\n          }\n\n          if (!(customer && customer.customerName && customer.customerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n\n          yield put(fetchCustomerListAddSuccess({\n            newCustomerData: {\n              model: \"accounts_receivable.cusgrp\",\n              pk: uuidv4(),\n              fields: {\n                customer_group: customer.customerGroup,\n                csgrp_name: customer.customerName\n              }\n            }\n          }));\n          yield put(resetAddCustomerState());\n          break;\n        }\n\n      case UPDATE_CUSTOMER:\n        {\n          const {\n            id,\n            newCustomerName\n          } = action.payload;\n\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n\n          let {\n            customerList\n          } = yield select(state => state.customerList);\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex(customer => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n          yield put(updateCustomerList({\n            customerList: clonedCustomerList\n          })); // Use custom delay\n\n          yield delay(600);\n          alert('Customer name has been successfully updated!');\n          break;\n        }\n\n      case DELETE_CUSTOMER:\n        {\n          const {\n            id\n          } = action.payload;\n          const {\n            customerList\n          } = yield select(state => state.customerList);\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter(customer => customer.pk !== id);\n          yield put(updateCustomerList({\n            customerList: updatedCustomerList\n          })); // Use custom delay\n\n          yield delay(600);\n          alert('Customer has been successfully deleted!');\n          break;\n        }\n\n      default:\n        break;\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n}\n\n_c = CustomerListWorker;\nexport default customerListWatcher;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerListWorker\");","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/redux/saga/customer-list.js"],"names":["takeLatest","put","select","delay","fetchCustomerListStart","fetchCustomerListSuccess","fetchCustomerListAddSuccess","updateCustomerList","resetAddCustomerState","ADD_CUSTOMER","UPDATE_CUSTOMER","DELETE_CUSTOMER","Customer","v4","uuidv4","customerListWatcher","type","CustomerListWorker","action","data","getCustomerList","customerData","customer","state","addCustomer","customerGroup","trim","alert","customerName","newCustomerData","model","pk","fields","customer_group","csgrp_name","id","newCustomerName","payload","customerList","clonedCustomerList","JSON","parse","stringify","index","findIndex","updatedCustomerList","filter","e","console","error"],"mappings":"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","sourcesContent":["import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport {\n  fetchCustomerListStart,\n  fetchCustomerListSuccess,\n  fetchCustomerListAddSuccess,\n  updateCustomerList\n} from '../reducers/customer-list';\nimport {resetAddCustomerState} from '../reducers/add-customer';\nimport { \n  ADD_CUSTOMER, \n  UPDATE_CUSTOMER, \n  DELETE_CUSTOMER \n} from '../actions/constants';\nimport Customer from '../services/customer';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction* customerListWatcher() {\n  yield takeLatest([ \n    fetchCustomerListStart.type, \n    ADD_CUSTOMER, \n    UPDATE_CUSTOMER, \n    DELETE_CUSTOMER ], CustomerListWorker)\n}\n\nfunction* CustomerListWorker(action) {\n  try {\n    switch (action.type) {\n      case fetchCustomerListStart.type: {\n        const data = Customer.getCustomerList();\n        yield put(fetchCustomerListSuccess({ customerData: data }));\n        break;\n      }\n      case ADD_CUSTOMER: {\n        const { customer } = yield select((state) => state.addCustomer)\n        if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n          alert('Customer group should not be empty!');\n          return;\n        }\n        \n        if (!(customer && customer.customerName && customer.customerName.trim())) {\n          alert('Customer name should not be empty!');\n          return;\n        }\n\n        yield put(fetchCustomerListAddSuccess({ \n          newCustomerData: {\n            model: \"accounts_receivable.cusgrp\",\n            pk: uuidv4(),\n            fields: {\n              customer_group: customer.customerGroup,\n              csgrp_name: customer.customerName\n            }\n          }}\n        ));\n        yield put(resetAddCustomerState());\n        break;\n      }\n      case UPDATE_CUSTOMER: {\n        const {id, newCustomerName} = action.payload;\n        if (!(newCustomerName && newCustomerName.trim())) {\n          alert('Customer name should not be empty!');\n          return;\n        }\n        let {customerList} = yield select((state) => state.customerList);\n        const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n        clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n        yield put(updateCustomerList({ customerList: clonedCustomerList }));\n        // Use custom delay\n        yield delay(600);\n        alert('Customer name has been successfully updated!');\n        break;\n      }\n      case DELETE_CUSTOMER: {\n        const {id} = action.payload;\n        const {customerList} = yield select((state) => state.customerList);\n        const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n        yield put(updateCustomerList({ customerList: updatedCustomerList }));\n        // Use custom delay\n        yield delay(600);\n        alert('Customer has been successfully deleted!');\n        break;\n      }\n      default:\n        break\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n}\n\nexport default customerListWatcher\n"]},"metadata":{},"sourceType":"module"}