{"ast":null,"code":"// import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport { fetchCustomerListStart, fetchCustomerListSuccess, fetchCustomerListAddSuccess, updateCustomerList } from './customerReducer'; // import {resetAddCustomerState} from '../reducers/add-customer';\n// import { \n//   ADD_CUSTOMER, \n//   UPDATE_CUSTOMER, \n//   DELETE_CUSTOMER \n// } from './actions/actions';\n\nimport Customer from '../redux/services/customer';\nimport { v4 as uuidv4 } from 'uuid'; // function* customerListWatcher() {\n//   yield takeLatest([ \n//     fetchCustomerListStart.type, \n//     ADD_CUSTOMER, \n//     UPDATE_CUSTOMER, \n//     DELETE_CUSTOMER ], CustomerListWorker)\n// }\n\nexport const initialState = [];\nexport const customerData = () => ({\n  type: 'CUSTOMER_LIST'\n});\nexport function CustomerListWorker(state, action) {\n  console.log('action  type', action);\n\n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST':\n        {\n          const data = Customer.getCustomerList();\n          console.log('data', data);\n          fetchCustomerListSuccess({\n            customerData: data\n          }); //yield put(fetchCustomerListSuccess({ customerData: data }));\n\n          break;\n        }\n\n      case 'ADD_CUSTOMER':\n        {\n          // const { customer } = yield select((state) => state.addCustomer)\n          // if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n          //   alert('Customer group should not be empty!');\n          //   return;\n          // }\n          // if (!(customer && customer.customerName && customer.customerName.trim())) {\n          //   alert('Customer name should not be empty!');\n          //   return;\n          // }\n          // yield put(fetchCustomerListAddSuccess({ \n          //   newCustomerData: {\n          //     model: \"accounts_receivable.cusgrp\",\n          //     pk: uuidv4(),\n          //     fields: {\n          //       customer_group: customer.customerGroup,\n          //       csgrp_name: customer.customerName\n          //     }\n          //   }}\n          // ));\n          // yield put(resetAddCustomerState());\n          break;\n        }\n\n      case 'UPDATE_CUSTOMER':\n        {\n          const {\n            id,\n            newCustomerName\n          } = action.payload;\n\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          } // let {customerList} = yield select((state) => state.customerList);\n          // const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          // const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n          // clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n          // yield put(updateCustomerList({ customerList: clonedCustomerList }));\n          // // Use custom delay\n          // yield delay(600);\n          // alert('Customer name has been successfully updated!');\n\n\n          break;\n        }\n\n      case 'DELETE_CUSTOMER':\n        {\n          // const {id} = action.payload;\n          // const {customerList} = yield select((state) => state.customerList);\n          // const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          // const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n          // yield put(updateCustomerList({ customerList: updatedCustomerList }));\n          // // Use custom delay\n          // yield delay(600);\n          // alert('Customer has been successfully deleted!');\n          break;\n        }\n\n      default:\n        break;\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n} // export default CustomerListWorker\n\n_c = CustomerListWorker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerListWorker\");","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/contextAPI/contextReducer.js"],"names":["fetchCustomerListStart","fetchCustomerListSuccess","fetchCustomerListAddSuccess","updateCustomerList","Customer","v4","uuidv4","initialState","customerData","type","CustomerListWorker","state","action","console","log","data","getCustomerList","id","newCustomerName","payload","trim","alert","e","error"],"mappings":"AAAA;AACA,SACEA,sBADF,EAEEC,wBAFF,EAGEC,2BAHF,EAIEC,kBAJF,QAKO,mBALP,C,CAMA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,EAArB;AACP,OAAO,MAAMC,YAAY,GAAG,OAAO;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAP,CAArB;AACP,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAkCC,MAAlC,EAA0C;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,MAA5B;;AACF,MAAI;AACF,YAAQA,MAAM,CAACH,IAAf;AACE,WAAK,eAAL;AAAsB;AACpB,gBAAMM,IAAI,GAAGX,QAAQ,CAACY,eAAT,EAAb;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBC,IAAnB;AACAd,UAAAA,wBAAwB,CAAC;AAACO,YAAAA,YAAY,EAAEO;AAAf,WAAD,CAAxB,CAHoB,CAIpB;;AACA;AACD;;AACD,WAAK,cAAL;AAAqB;AACpB;AACC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAK,iBAAL;AAAwB;AACtB,gBAAM;AAACE,YAAAA,EAAD;AAAKC,YAAAA;AAAL,cAAwBN,MAAM,CAACO,OAArC;;AACA,cAAI,EAAED,eAAe,IAAIA,eAAe,CAACE,IAAhB,EAArB,CAAJ,EAAkD;AAChDC,YAAAA,KAAK,CAAC,oCAAD,CAAL;AACA;AACD,WALqB,CAMtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACD;;AACD,WAAK,iBAAL;AAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD;AACE;AA7DJ;AA+DD,GAhED,CAgEE,OAAOC,CAAP,EAAU;AACVT,IAAAA,OAAO,CAACU,KAAR,CAAe,0CAAyCX,MAAM,CAACH,IAAK,EAApE,EAAuEa,CAAvE;AACD;AACF,C,CAED;;KAvEgBZ,kB","sourcesContent":["// import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport {\n  fetchCustomerListStart,\n  fetchCustomerListSuccess,\n  fetchCustomerListAddSuccess,\n  updateCustomerList\n} from './customerReducer';\n// import {resetAddCustomerState} from '../reducers/add-customer';\n// import { \n//   ADD_CUSTOMER, \n//   UPDATE_CUSTOMER, \n//   DELETE_CUSTOMER \n// } from './actions/actions';\nimport Customer from '../redux/services/customer';\nimport { v4 as uuidv4 } from 'uuid';\n\n// function* customerListWatcher() {\n//   yield takeLatest([ \n//     fetchCustomerListStart.type, \n//     ADD_CUSTOMER, \n//     UPDATE_CUSTOMER, \n//     DELETE_CUSTOMER ], CustomerListWorker)\n// }\n\nexport const initialState = [];\nexport const customerData = () => ({type: 'CUSTOMER_LIST'});\nexport function CustomerListWorker(state,action) {\n    console.log('action  type', action)\n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST': {\n        const data = Customer.getCustomerList();\n        console.log('data',data)\n        fetchCustomerListSuccess({customerData: data})\n        //yield put(fetchCustomerListSuccess({ customerData: data }));\n        break;\n      }\n      case 'ADD_CUSTOMER': {\n       // const { customer } = yield select((state) => state.addCustomer)\n        // if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n        //   alert('Customer group should not be empty!');\n        //   return;\n        // }\n        \n        // if (!(customer && customer.customerName && customer.customerName.trim())) {\n        //   alert('Customer name should not be empty!');\n        //   return;\n        // }\n\n        // yield put(fetchCustomerListAddSuccess({ \n        //   newCustomerData: {\n        //     model: \"accounts_receivable.cusgrp\",\n        //     pk: uuidv4(),\n        //     fields: {\n        //       customer_group: customer.customerGroup,\n        //       csgrp_name: customer.customerName\n        //     }\n        //   }}\n        // ));\n        // yield put(resetAddCustomerState());\n        break;\n      }\n      case 'UPDATE_CUSTOMER': {\n        const {id, newCustomerName} = action.payload;\n        if (!(newCustomerName && newCustomerName.trim())) {\n          alert('Customer name should not be empty!');\n          return;\n        }\n        // let {customerList} = yield select((state) => state.customerList);\n        // const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        // const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n        // clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n        // yield put(updateCustomerList({ customerList: clonedCustomerList }));\n        // // Use custom delay\n        // yield delay(600);\n        // alert('Customer name has been successfully updated!');\n        break;\n      }\n      case 'DELETE_CUSTOMER': {\n        // const {id} = action.payload;\n        // const {customerList} = yield select((state) => state.customerList);\n        // const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        // const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n        // yield put(updateCustomerList({ customerList: updatedCustomerList }));\n        // // Use custom delay\n        // yield delay(600);\n        // alert('Customer has been successfully deleted!');\n        break;\n      }\n      default:\n        break\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n}\n\n// export default CustomerListWorker\n"]},"metadata":{},"sourceType":"module"}