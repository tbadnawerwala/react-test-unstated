{"ast":null,"code":"// import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport { fetchCustomerListStart, fetchCustomerListSuccess, fetchCustomerListAddSuccess, updateCustomerList } from './customerReducer'; // import {resetAddCustomerState} from '../reducers/add-customer';\n// import { \n//   ADD_CUSTOMER, \n//   UPDATE_CUSTOMER, \n//   DELETE_CUSTOMER \n// } from './actions/actions';\n\nimport Customer from '../redux/services/customer';\nimport { v4 as uuidv4 } from 'uuid'; // function* customerListWatcher() {\n//   yield takeLatest([ \n//     fetchCustomerListStart.type, \n//     ADD_CUSTOMER, \n//     UPDATE_CUSTOMER, \n//     DELETE_CUSTOMER ], CustomerListWorker)\n// }\n\nexport const initialState = {\n  isLoading: null,\n  error: null,\n  customerList: [],\n  customer: {\n    customerName: '',\n    customerGroup: ''\n  }\n};\nexport const customerData = () => ({\n  type: 'CUSTOMER_LIST'\n});\nexport const saveCustomer1 = () => ({\n  type: 'SAVE_CUSTOMER'\n}); // export const addCustomer = (data) => ({type: 'ADD_CUSTOMER' , payload: data});\n\nexport const updateCustomer = () => ({\n  type: 'UPDATE_CUSTOMER'\n});\nexport const deleteCustomer = () => ({\n  type: 'DELETE_CUSTOMER'\n});\nexport const CustomerListWorker = (state, action) => {\n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST':\n        {\n          const data = Customer.getCustomerList();\n          console.log('state', state); // return {\n          //     ...state,\n          //     customerList: data,\n          //     isLoading: false\n          // }\n\n          return fetchCustomerListSuccess({\n            customerData: data\n          }); //yield put(fetchCustomerListSuccess({ customerData: data }));\n\n          break;\n        }\n      // case 'ADD_CUSTOMER': {\n      //   return {\n      //     ...initialState,\n      //     isLoading: true,\n      //     customer: action.payload  \n      //   }\n      //   break;\n      // }\n\n      case 'SAVE_CUSTOMER':\n        {\n          //console.log('add customer', state)\n          //  const { customer } = state\n          //   if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n          //     alert('Customer group should not be empty!');\n          //     return;\n          //   }\n          //   if (!(customer && customer.customerName && customer.customerName.trim())) {\n          //     alert('Customer name should not be empty!');\n          //     return;\n          //   }\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const data = {\n            model: \"accounts_receivable.cusgrp\",\n            pk: 200,\n            fields: {\n              customer_group: 'tayyab',\n              csgrp_name: 'tayyab'\n            }\n          };\n          clonedCustomerList.push(data);\n          return fetchCustomerListAddSuccess({\n            customerList: clonedCustomerList\n          }); // yield put(resetAddCustomerState());\n\n          break;\n        }\n\n      case 'UPDATE_CUSTOMER':\n        {\n          console.log('update customer', state);\n          const {\n            id,\n            newCustomerName\n          } = action.payload;\n\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex(customer => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName; // yield put(updateCustomerList({ customerList: clonedCustomerList }));\n\n          return updateCustomerList({\n            customerList: clonedCustomerList\n          }); // Use custom delay\n          // yield delay(600);\n          // alert('Customer name has been successfully updated!');\n\n          break;\n        }\n\n      case 'DELETE_CUSTOMER':\n        {\n          const {\n            id\n          } = action.payload;\n          const {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter(customer => customer.pk !== id);\n          return updateCustomerList({\n            customerList: updatedCustomerList\n          }); // // Use custom delay\n          // yield delay(600);\n          // alert('Customer has been successfully deleted!');\n\n          break;\n        }\n\n      default:\n        return { ...state\n        };\n        break;\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n}; // export default CustomerListWorker\n\n_c = CustomerListWorker;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerListWorker\");","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/contextAPI/contextReducer.js"],"names":["fetchCustomerListStart","fetchCustomerListSuccess","fetchCustomerListAddSuccess","updateCustomerList","Customer","v4","uuidv4","initialState","isLoading","error","customerList","customer","customerName","customerGroup","customerData","type","saveCustomer1","updateCustomer","deleteCustomer","CustomerListWorker","state","action","data","getCustomerList","console","log","clonedCustomerList","JSON","parse","stringify","model","pk","fields","customer_group","csgrp_name","push","id","newCustomerName","payload","trim","alert","index","findIndex","updatedCustomerList","filter","e"],"mappings":"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","sourcesContent":["// import { takeLatest, put, select, delay } from 'redux-saga/effects';\nimport {\n  fetchCustomerListStart,\n  fetchCustomerListSuccess,\n  fetchCustomerListAddSuccess,\n  updateCustomerList\n} from './customerReducer';\n// import {resetAddCustomerState} from '../reducers/add-customer';\n// import { \n//   ADD_CUSTOMER, \n//   UPDATE_CUSTOMER, \n//   DELETE_CUSTOMER \n// } from './actions/actions';\nimport Customer from '../redux/services/customer';\nimport { v4 as uuidv4 } from 'uuid';\n\n// function* customerListWatcher() {\n//   yield takeLatest([ \n//     fetchCustomerListStart.type, \n//     ADD_CUSTOMER, \n//     UPDATE_CUSTOMER, \n//     DELETE_CUSTOMER ], CustomerListWorker)\n// }\n\nexport const initialState = {\n    isLoading: null,\n    error: null,\n    customerList: [],\n    customer:{\n      customerName: '',\n      customerGroup: ''\n    }\n  }\n\n  \nexport const customerData = () => ({type: 'CUSTOMER_LIST'});\nexport const saveCustomer1 = () => ({type: 'SAVE_CUSTOMER'});\n// export const addCustomer = (data) => ({type: 'ADD_CUSTOMER' , payload: data});\nexport const updateCustomer = () => ({type: 'UPDATE_CUSTOMER'});\nexport const deleteCustomer = () => ({type: 'DELETE_CUSTOMER'})\nexport const CustomerListWorker = (state,action)=> {\n  \n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST': {\n        const data = Customer.getCustomerList();\n        \n        console.log('state', state)\n        // return {\n        //     ...state,\n        //     customerList: data,\n        //     isLoading: false\n        // }\n       return  fetchCustomerListSuccess({customerData: data})\n        //yield put(fetchCustomerListSuccess({ customerData: data }));\n        break;\n      }\n\n      // case 'ADD_CUSTOMER': {\n      //   return {\n      //     ...initialState,\n      //     isLoading: true,\n      //     customer: action.payload  \n      //   }\n      //   break;\n      // }\n\n      case 'SAVE_CUSTOMER': {\n          //console.log('add customer', state)\n      //  const { customer } = state\n      //   if (!(customer && customer.customerGroup && customer.customerGroup.trim())) {\n      //     alert('Customer group should not be empty!');\n      //     return;\n      //   }\n        \n      //   if (!(customer && customer.customerName && customer.customerName.trim())) {\n      //     alert('Customer name should not be empty!');\n      //     return;\n      //   }\n          let {customerList} = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const data =  {\n            model: \"accounts_receivable.cusgrp\",\n            pk: 200,\n            fields: {\n              customer_group: 'tayyab',\n              csgrp_name: 'tayyab'\n            }\n          }\n          clonedCustomerList.push(data)\n         \n          return fetchCustomerListAddSuccess({customerList: clonedCustomerList});\n        // yield put(resetAddCustomerState());\n        break;\n      }\n      case 'UPDATE_CUSTOMER': {\n          console.log('update customer', state)\n          const {id, newCustomerName} = action.payload;\n        if (!(newCustomerName && newCustomerName.trim())) {\n          alert('Customer name should not be empty!');\n          return;\n        }\n        let {customerList} = state;\n        const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n        clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n        // yield put(updateCustomerList({ customerList: clonedCustomerList }));\n      return  updateCustomerList({ customerList: clonedCustomerList })\n        // Use custom delay\n        // yield delay(600);\n        // alert('Customer name has been successfully updated!');\n        break;\n      }\n      case 'DELETE_CUSTOMER': {\n        const {id} = action.payload;\n        const {customerList} = state;\n        const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n        const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n       return updateCustomerList({ customerList: updatedCustomerList });\n        // // Use custom delay\n        // yield delay(600);\n        // alert('Customer has been successfully deleted!');\n        break;\n      }\n      default:\n        return {\n          ...state\n        }\n        break\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n}\n\n// export default CustomerListWorker\n"]},"metadata":{},"sourceType":"module"}