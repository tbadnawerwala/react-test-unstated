{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useReducer } from \"react\";\nimport { createContainer } from \"unstated-next\";\nexport const initialState = {\n  isLoading: null,\n  error: null,\n  customerList: []\n};\nexport const customerData = () => ({\n  type: 'CUSTOMER_LIST'\n});\nexport const saveCustomer1 = data => ({\n  type: 'SAVE_CUSTOMER',\n  payload: data\n}); // export const addCustomer = (data) => ({type: 'ADD_CUSTOMER' , payload: data});\n\nexport const updateCustomer = () => ({\n  type: 'UPDATE_CUSTOMER'\n});\nexport const deleteCustomer = () => ({\n  type: 'DELETE_CUSTOMER'\n});\n\nconst reducerOne = (state, action) => {\n  try {\n    switch (action.type) {\n      case 'CUSTOMER_LIST':\n        {\n          const data = Customer.getCustomerList();\n          return fetchCustomerListSuccess({\n            customerData: data\n          });\n          break;\n        }\n\n      case 'SAVE_CUSTOMER':\n        {\n          if (!(action.payload && action.payload.customerGroup && action.payload.customerGroup.trim())) {\n            alert('Customer group should not be empty!');\n            return;\n          }\n\n          if (!(action.payload && action.payload.customerName && action.payload.customerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const data = {\n            model: \"accounts_receivable.cusgrp\",\n            pk: uuidv4(),\n            fields: {\n              customer_group: action.payload.customerGroup,\n              csgrp_name: action.payload.customerName\n            }\n          };\n          clonedCustomerList.push(data);\n          return fetchCustomerListAddSuccess({\n            customerList: clonedCustomerList\n          });\n          break;\n        }\n\n      case 'UPDATE_CUSTOMER':\n        {\n          const {\n            id,\n            newCustomerName\n          } = action.payload;\n\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n\n          let {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex(customer => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n          return updateCustomerList({\n            customerList: clonedCustomerList\n          });\n          break;\n        }\n\n      case 'DELETE_CUSTOMER':\n        {\n          const {\n            id\n          } = action.payload;\n          const {\n            customerList\n          } = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter(customer => customer.pk !== id);\n          return updateCustomerList({\n            customerList: updatedCustomerList\n          });\n          break;\n        }\n\n      default:\n        return { ...state\n        };\n        break;\n    }\n  } catch (e) {\n    console.error(`Error occuring while calling an action ${action.type}`, e);\n  }\n};\n\nconst reducerTwo = (state, action) => {};\n\nconst [reducerCombined, initialStateCombined] = combineReducers({\n  reducerOne: [reducerOne, initialStateOne],\n  reducerTwo: [reducerTwo, initialStateTwo] // ...\n\n});\n\nfunction useCounter(initialCount = {\n  count: 0\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducerCombined, initialStateCombined);\n  return {\n    state,\n    dispatch\n  };\n}\n\n_s(useCounter, \"PhSLBpC7XKzUwnFPswq+3d0KSTU=\");\n\nexport const Counter = createContainer(useCounter);","map":{"version":3,"sources":["/home/rails/react-test-code-contextAPI/src/un-stated/index.js"],"names":["React","useState","useReducer","createContainer","initialState","isLoading","error","customerList","customerData","type","saveCustomer1","data","payload","updateCustomer","deleteCustomer","reducerOne","state","action","Customer","getCustomerList","fetchCustomerListSuccess","customerGroup","trim","alert","customerName","clonedCustomerList","JSON","parse","stringify","model","pk","uuidv4","fields","customer_group","csgrp_name","push","fetchCustomerListAddSuccess","id","newCustomerName","index","findIndex","customer","updateCustomerList","updatedCustomerList","filter","e","console","reducerTwo","reducerCombined","initialStateCombined","combineReducers","initialStateOne","initialStateTwo","useCounter","initialCount","count","dispatch","Counter"],"mappings":"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","sourcesContent":["import React, { useState,useReducer } from \"react\"\nimport { createContainer } from \"unstated-next\"\n\n\nexport const initialState = {\n    isLoading: null,\n    error: null,\n    customerList: [],\n  }\n\n  export const customerData = () => ({type: 'CUSTOMER_LIST'});\nexport const saveCustomer1 = (data) => ({type: 'SAVE_CUSTOMER', payload: data});\n// export const addCustomer = (data) => ({type: 'ADD_CUSTOMER' , payload: data});\nexport const updateCustomer = () => ({type: 'UPDATE_CUSTOMER'});\nexport const deleteCustomer = () => ({type: 'DELETE_CUSTOMER'})\n\nconst reducerOne = (state,action)=> {\n  \n    try {\n      switch (action.type) {\n        case 'CUSTOMER_LIST': {\n          const data = Customer.getCustomerList();\n         return  fetchCustomerListSuccess({customerData: data})\n          break;\n        }\n        case 'SAVE_CUSTOMER': {\n \n          if (!(action.payload && action.payload.customerGroup && action.payload.customerGroup.trim())) {\n            alert('Customer group should not be empty!');\n            return ;\n          }\n          \n          if (!(action.payload && action.payload.customerName && action.payload.customerName.trim())) {\n            alert('Customer name should not be empty!');\n            return ;\n          }\n            let {customerList} = state;\n            const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n            const data =  {\n              model: \"accounts_receivable.cusgrp\",\n              pk: uuidv4(),\n              fields: {\n                customer_group: action.payload.customerGroup,\n                csgrp_name: action.payload.customerName\n              }\n            }\n            clonedCustomerList.push(data)\n           \n             return fetchCustomerListAddSuccess({customerList: clonedCustomerList});\n          break;\n        }\n        case 'UPDATE_CUSTOMER': {\n            \n            const {id, newCustomerName} = action.payload;\n          if (!(newCustomerName && newCustomerName.trim())) {\n            alert('Customer name should not be empty!');\n            return;\n          }\n          let {customerList} = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const index = clonedCustomerList.findIndex((customer) => customer.pk === id);\n          clonedCustomerList[index].fields.csgrp_name = newCustomerName;\n        return  updateCustomerList({ customerList: clonedCustomerList })\n          break;\n        }\n        case 'DELETE_CUSTOMER': {\n          const {id} = action.payload;\n          const {customerList} = state;\n          const clonedCustomerList = JSON.parse(JSON.stringify(customerList));\n          const updatedCustomerList = clonedCustomerList.filter((customer) => customer.pk !== id);\n         return updateCustomerList({ customerList: updatedCustomerList });\n          break;\n        }\n        default:\n          return {\n            ...state\n          }\n          break\n      }\n    } catch (e) {\n      console.error(`Error occuring while calling an action ${action.type}`, e);\n    }\n  }\n\nconst reducerTwo = (state,action)=>{\n    \n}\n\n  const [reducerCombined, initialStateCombined] = combineReducers({\n    reducerOne: [reducerOne, initialStateOne],\n    reducerTwo: [reducerTwo, initialStateTwo],\n    // ...\n  });\n\n  function useCounter(initialCount = {count: 0}){\n    const [state, dispatch] = useReducer(reducerCombined, initialStateCombined);\n    return {state, dispatch}\n  }\n  \n\n\n\nexport const Counter  = createContainer(useCounter);\n\n\n"]},"metadata":{},"sourceType":"module"}